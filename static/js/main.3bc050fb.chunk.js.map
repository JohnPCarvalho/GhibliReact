{"version":3,"sources":["assets/logo.png","components/Card/styles.js","components/Card/index.js","api/api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","styled","div","CardContent","MovieTitle","h1","MovieDescription","p","Card","props","style","backgroundImage","hexValues","populate","a","i","x","Math","round","random","newColor1","newColor2","randomColor","title","description","api","axios","create","baseURL","App","useState","movies","setMovies","useEffect","get","response","data","console","error","log","getMovies","renderedMovies","class","map","movie","substring","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,qwCCElBC,IAAOC,IAAV,KAAf,IAKMC,EAAcF,IAAOC,IAAV,KAuBXE,EAAaH,IAAOI,GAAV,KASVC,EAAmBL,IAAOM,EAAV,KCnChBC,EAAO,SAACC,GAqBjB,OACQ,kBAACN,EAAD,KACI,kBAACC,EAAD,CAAYM,MAAO,CAACC,gBArBZ,WAChB,IAAIC,EAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAEzE,SAASC,EAASC,GACd,IAAM,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAM,CAC5B,IAAIC,EAAIC,KAAKC,MAAuB,GAAhBD,KAAKE,UAEzBL,GADQF,EAAUI,GAGpB,OAAOF,EAET,IAAIM,EAAYP,EAAS,KACvBQ,EAAYR,EAAS,KAIzB,MADe,mBAFHI,KAAKC,MAAuB,IAAhBD,KAAKE,UAEe,QAAUC,EAAY,KAAOC,EAAY,IAMxCC,KAAkBb,EAAMc,OAC7D,kBAACjB,EAAD,KAAmBG,EAAMe,e,QCtB1BC,E,OAJHC,EAAMC,OAAO,CACrBC,QAAS,oCCiEEC,MA9Df,WAAgB,IAAD,EAEeC,mBAAS,IAFxB,mBAENC,EAFM,KAEEC,EAFF,KAMbC,qBAAU,WAAM,4CACd,4BAAAnB,EAAA,+EAE2BW,EAAIS,IAAI,UAFnC,OAEUC,EAFV,OAGIH,EAAUG,EAASC,MAHvB,gDAKIC,QAAQC,MAAR,MALJ,0DADc,sBASdD,QAAQE,IAAIR,GATG,WAAD,wBAUdS,KACC,IAiBH,IAAIC,EAAiB,KAgBrB,OAbEA,EADY,MAAVV,EAEA,6BACE,sDAKF,yBAAKW,MAAM,aACRX,EAAOY,KAAI,SAAAC,GAAK,OAAI,kBAAC,EAAD,CAAMrB,MAAOqB,EAAMrB,MAAOC,YAAaoB,EAAMpB,YAAYqB,UAAU,EAAG,KAAO,YAMtG,yBAAKC,UAAU,OAEb,yBAAKC,IAAKC,IAAMC,IAAI,qBAAqB1B,MAAM,uBAC9CkB,IChDaS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5B,GACLD,QAAQC,MAAMA,EAAM6B,c","file":"static/js/main.3bc050fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e86d97c0.png\";","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n`;\n\nexport const CardContent = styled.div`\n    margin: 1rem;\n    background: white;\n    box-shadow: 2px 4px 25px rgba(0, 0, 0, .1);\n    border-radius: 12px;\n    overflow: hidden;\n    transition: all .2s linear;\n    \n\n    @media screen and (min-width: 600px) {\n        flex: 1 1 calc(50% - 2rem);\n    }\n\n    @media screen and (min-width: 900px) {\n        flex: 1 1 calc(33% - 2rem);\n    }\n\n    :hover {\n        box-shadow: 2px 8px 45px rgba(0, 0, 0, .15);\n        transform: translate3D(0, -25px, 0);\n    }\n`;\n\nexport const MovieTitle = styled.h1`\n    text-align: center;\n    padding: 1.5rem 2.5rem;\n    background-image: linear-gradient(120deg, #fbc2eb 0%, #a6c1ee 100%);\n    margin: 0 0 2rem 0;\n    font-size: 1.5rem;\n    color: white;\n`;\n\nexport const MovieDescription = styled.p`\n    padding: 0 2.5rem 2.5rem;\n    margin: 0;\n`;\n\n","import React from 'react';\nimport { CardContent, MovieTitle, MovieDescription } from './styles';\n\n\nexport const Card = (props) => {\n\n    const randomColor = () => {\n        var hexValues = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\"];\n\n        function populate(a) {\n            for ( var i = 0; i < 6; i++ ) {\n              var x = Math.round( Math.random() * 14 );\n              var y = hexValues[x];\n              a += y;\n            }\n            return a;\n          }\n          var newColor1 = populate('#');\n        var newColor2 = populate('#');\n        var angle = Math.round( Math.random() * 360 );\n  \n        var gradient = \"linear-gradient(\" + angle + \"deg, \" + newColor1 + \", \" + newColor2 + \")\";\n        return gradient\n    }\n\n    return (\n            <CardContent>\n                <MovieTitle style={{backgroundImage: randomColor()}} >{props.title}</MovieTitle>\n                <MovieDescription>{props.description}</MovieDescription>\n            </CardContent> \n    )\n}","import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'https://ghibliapi.herokuapp.com'\n})\n\nexport default api;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport logo from './assets/logo.png'\nimport { Card, Container } from './components/Card'\nimport api from './api/api';\n\nfunction App() {\n\n  const [movies, setMovies] = useState([]);\n\n  //ficara dentro de useEffect para carregar no momento da renderizacao\n\n  useEffect(() => {\n    async function getMovies() {\n      try {\n        const response = await api.get('/films');\n        setMovies(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    console.log(movies);\n    getMovies();\n  }, [])\n\n  /* async function getMovies() {\n    try {\n      const response = await api.get('/films');\n      console.log(response);\n      setMovies(response);\n      console.log(typeof(movies));\n      console.log(\"Movies: \" , movies);\n    } catch (error) {\n      console.error(error);\n    }\n  } */\n  \n\n  //movies.data.map(movie)\n\n  let renderedMovies = null;\n\n  if (movies == null) {\n    renderedMovies = (\n      <div>\n        <h1>There is no movies :(</h1>\n      </div>\n    ); \n  } else {\n    renderedMovies = (\n      <div class=\"container\">\n        {movies.map(movie => <Card title={movie.title} description={movie.description.substring(0, 300) + '...'} />)}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      {/* <button onClick={getMovies}>Fetch movies</button>  */}\n      <img src={logo} alt=\"studio ghibli logo\" title=\"Studio ghibli logo\"/>\n      {renderedMovies}\n    </div>\n  );\n}\n\n  \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}